using System;
using System.Collections.Concurrent;

namespace Xache.Caching
{
	/// <summary>
	/// Uses a ConcurrentDictionary internally to cache items.
	/// </summary>
	/// <typeparam name="TKey">The type of the key.</typeparam>
	/// <typeparam name="TValue">The type of the value.</typeparam>
	/// <seealso cref="Xache.Caching.ICachingMethod{TKey, TValue}" />
	/// <autogeneratedoc />
	public class ConcurrentDictionaryCache<TKey, TValue> : ICachingMethod<TKey, TValue>
	{
		public ConcurrentDictionaryCache() => _data = new ConcurrentDictionary<TKey, TValue>();

		private ConcurrentDictionary<TKey, TValue> _data;

		public TValue GetOrStore(TKey key, Func<TValue> getValue)
		{
			if (_data.TryGetValue(key, out var value))
			{
				return value;
			}

			value = getValue();

			_data.TryAdd(key, value);
			
			return value;
		}
	}
}